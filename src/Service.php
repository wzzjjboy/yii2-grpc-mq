<?php


namespace alan\yii2_grpc_mq;

use Grpc\Parser;
use MqManage\ConsumeRequest;
use MqManage\ConsumeResponse;
use yii\base\BaseObject;
use yii\base\InvalidParamException;

class Service extends BaseObject
{
    public $log_level = SWOOLE_LOG_INFO;

    public $trace_flags = 0;

    public $worker_num  = 1;

    public $open_http2_protocol = true;

    public $port = 50052;

    public $host = '0.0.0.0';

    public $swoole_model = SWOOLE_BASE;

    /**
     * @var \Swoole\Http\Server
     */
    private $http;

    /**
     * @var IHandler[]
     */
    public $handlerList;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->http = new \Swoole\Http\Server($this->host, $this->port, $this->swoole_model);
        $this->http->set([
            'log_level' => SWOOLE_LOG_INFO,
            'trace_flags' => 0,
            'worker_num' => 1,
            'open_http2_protocol' => true
        ]);
        $this->registerEvent("workerStart", function (\Swoole\Http\Server $server){
            \Yii::info("yii2-grpc-swoole-service start");
        });
    }

    public function start()
    {
        $this->registerEvent("request", function (\Swoole\Http\Request $request, \Swoole\Http\Response $response){
            $path = $request->server['request_uri'];
            $route = [];
            foreach ($this->handlerList as $callback) {
                if (is_string($callback)){
                    $callback = \Yii::createObject($callback);
                }
                if (!$callback instanceof IHandler) {
                    throw new InvalidParamException("handler must implements IHandler interface...");
                }
                $route[$callback->getRoute()] = function () use($callback, $request, $response) {
                    /**@var $request_message ConsumeRequest */
                    $request_message = Parser::deserializeMessage([ConsumeRequest::class, null], $request->rawContent());
                    if ($request_message) {
                        $data = [];
                        foreach ($request_message->getTaskData()->getIterator() as $k => $v) {
                            $data[$k] = $v;
                        }
                        $rsp = $callback->handler($request_message->getAppName(), $request_message->getTaskName(),$data);
                        $response_message = new ConsumeResponse();
                        if ($rsp) {
                            $response_message->setCode(0);
                        } else {
                            $response_message->setCode(1);
                        }
                        $response_message->setMsg("success");
                        $response->header('content-type', 'application/grpc');
                        $response->header('trailer', 'grpc-status, grpc-message');
                        $trailer = [
                            "grpc-status" => "0",
                            "grpc-message" => ""
                        ];
                        foreach ($trailer as $trailer_name => $trailer_value) {
                            $response->trailer($trailer_name, $trailer_value);
                        }
                        $response->end(Parser::serializeMessage($response_message));
                        return true;
                    }
                    return false;
                };
            }

            if (!(isset($route[$path]) && $route[$path]())) {
                $response->status(400);
                $response->end('Bad Request');
            }
        });
        $this->http->start();
    }

    private function registerEvent($event, \Closure $closure) {
        /** @var \Swoole\Http\Server $server */
        $this->http->on($event, $closure);
    }
}